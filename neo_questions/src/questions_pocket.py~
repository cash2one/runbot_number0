#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright (C) 2012-2013 Thecorpora Inc.
#
#  Modified by Vincent FOUCAULT elpimous12@orange.fr
#
#  for pocketsphinx use, in replacement of julius (not working due to oss)
#
######################################################################################

import roslib; roslib.load_manifest('qbo_questions')
import rospy
import random
import sys
import os

from qbo_talk.srv import Text2Speach
#from qbo_face_msgs.msg import FacePosAndDist
from std_msgs.msg import String


#Load plugins directory
path = roslib.packages.get_pkg_dir("qbo_questions")
sys.path.append(path+"/src/plugins")

class qbo_questions:

   def __init__(self):
      rospy.on_shutdown(self.cleanup)
      global client_speak
      #global face_detected
      global dialogue
      global subscribe
      global plugins
      global lang

# pocketsphinx recovering words method
      rospy.Subscriber('recognizer/output', String, self.listen_callback)

      r = rospy.Rate(10.0)
      while not rospy.is_shutdown():
         r.sleep()

   def system_language(data):
       try:
           set_language(data.data)
           rospy.loginfo("Language changed to "+data.data)
       except KeyError:
           rospy.loginfo("Error: Language not recognized("+data.data+")")


   def speak_this(text):
       global client_speak
       #client_speak(str(text))
       #rosservice call /say(str(text))

   def listen_callback(self, msg):
#       global face_detected  
       global dialogue
       text=""
       sentence = msg.data
       rospy.loginfo("Listened: |"+sentence+"|")
   
 #      if not face_detected:
 #         rospy.loginfo("Ignoring last sentece because face was not detected")
  #        return


       if sentence ==("what+is+your+name"):
          print "je m'appelle NÃ©o."

       if sentence in dialogue:
          output = dialogue[sentence]
          choice=random.choice(output)
        
          if choice[0]=="$":
             choice=choice.replace("$","")
             choice=choice.lower()
             for plug in plugins:
                try:
                   text=getattr(plug,choice)(sentence,lang)
                   break
                except AttributeError:
                   rospy.loginfo("Attibute "+choice +" could not be found:"+ str(dir(plug)))
          else:
             text=choice
          speak_this(text)

   def read_dialogues(filename):
      global dialogue
      dialogue = {}
      f = open(filename)    
      for line in f.readlines():
         try:
            line = line.replace("\n","")
            parts = line.split(">>>")

            dialogue_input = parts[0].upper()
            dialogue_output = parts[1].upper().strip()
        
            # we check wheter the input line alreayd exists, if so, we add to its own list
            if dialogue_input in dialogue:                
                dialogue[dialogue_input].append(dialogue_output)
            else:
                #dialogue_input does not exist
                dialogue[dialogue_input] = [dialogue_output]
         except Exception:
            pass        

      f.close()

   def set_language(lang):

      if lang!="es" and lang!="en":
         lang="en"

      global subscribe
      try:
         subscribe.unregister()
         rospy.loginfo("Unregistered from previous language")
      except NameError:
         rospy.loginfo("First language set")


      path = roslib.packages.get_pkg_dir("qbo_questions")
      filename = path+'/config/dialogues_'+lang
      print "Dialogue filename loaded: "+filename
      read_dialogues(filename)
      subscribe=rospy.Subscriber('recognizer/output', String, self.listen_callback)

   def loadPlugins():
      global plugins
      plugins=[]
      path = roslib.packages.get_pkg_dir("qbo_questions")
      for f in os.listdir(path+"/src/plugins/"):
         moduleName, ext = os.path.splitext(f) 
         if ext == '.py' and moduleName!="__init__":
            plugins.append(__import__(moduleName))


   def main():
      global client_speak
  #    global face_detected
      global lang

    #  Init ROS
      rospy.init_node('qbo_questions')
      lang = rospy.get_param("/system_lang", "en")

    #Init variable to know if somebody is in front of qbo
  #  face_detected = False

    #Load plugins
      loadPlugins()

      set_language(lang)
      print "Language loaded: "+lang

      print "Dialog => "+str(dialogue)

      rospy.loginfo("Starting questions node")
 
      client_speak = rospy.ServiceProxy("/qbo_talk/festival_say", Text2Speach)

    #Set Julius
   # rospy.Subscriber("/system_lang", String, system_language)

    #For face view
    #rospy.Subscriber("/qbo_face_tracking/face_pos_and_dist", FacePosAndDist, face_callback)


      rospy.spin()


if __name__ == '__main__':
    rospy.init_node('qbo_questions')
    try:
        qbo_questions()
    except:
        pass
